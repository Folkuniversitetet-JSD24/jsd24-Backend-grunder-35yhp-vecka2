Lätta övningar 

📝 1. Enkel Request Loggning

Uppgift:
Skapa en middleware som loggar följande:
- Metod (GET, POST, PUT, DELETE)
- URL
- Tidpunkt

Exempelutskrift:
[2025-03-25 14:30:45] GET /api/users

Tips:
Använd new Date().toISOString() för tidsstämpeln.
---------------------------------------------------
📝 2. Respons Tidsmätning

Uppgift:
Skapa en middleware som mäter tiden det tar för en request att bli besvarad. Logga sedan tiden i konsolen.

Exempelutskrift:
Request till /api/data tog 52 ms.

Tips:
Använd Date.now() för att mäta start- och slutid.
---------------------------------------------------
📝 3. Statisk Filserver Middleware

Uppgift:
Skapa en middleware som serverar statiska filer från en mapp som heter public.
- Filerna ska kunna nås på URL:en: /static.

Tips:
Använd Express inbyggda middleware:
app.use('/static', express.static('public'));
---------------------------------------------------
---------------------------------------------------
---------------------------------------------------
🟠 Medelsvåra övningar (Utmaningsnivå)

📝 4. IP-Loggning

Uppgift:
Skapa en middleware som loggar IP-adressen för varje inkommande request.
- Lägg till IP-adressen i samma loggradering som metod och URL.

Exempelutskrift:
[2025-03-25 14:31:00] GET /api/products - IP: 192.168.0.1

Tips:
Använd req.ip eller req.connection.remoteAddress för att få IP-adressen.
---------------------------------------------------
📝 5. API-Key Autentisering

Uppgift:
Skapa en autentiseringsmiddleware som kräver en API-nyckel i headers:
- Om nyckeln saknas eller är felaktig, returnera 401 Unauthorized.
- Använd en miljövariabel för att lagra den korrekta nyckeln.
- Logga alla autentiseringsförsök.

Tips:
Använd dotenv för att hantera miljövariabler.
---------------------------------------------------
📝 6. Felspårningsmiddleware

Uppgift:
Skapa en middleware som loggar stacktracen för alla fel som uppstår i applikationen.
- Logga både felets namn och dess stacktrace till en fil.

Tips:
- Använd err.stack för att få hela stacktracen.

- Använd Winston för att logga både till konsolen och till en fil.
---------------------------------------------------
---------------------------------------------------
---------------------------------------------------
🔴 Svåra övningar (Avancerad nivå)

📝 7. Rate Limiting

Uppgift:
Implementera en rate limiting-middleware som endast tillåter max 100 requests per minut per IP-adress.
- Om gränsen överskrids, returnera 429 Too Many Requests.
- Använd en in-memory databas som Map för att hålla koll på antalet requests per IP.

Bonus:
Implementera en mer avancerad lösning med Redis istället för Map.
---------------------------------------------------
📝 8. CORS Middleware

Uppgift:
Skapa en CORS-middleware som hanterar CORS-förfrågningar från specifika domäner.
- Tillåt endast specifika domäner, till exempel: http://localhost:3000 och https://mydomain.com.
- Returnera rätt CORS-headers beroende på domänen.

Tips:
- Använd res.setHeader('Access-Control-Allow-Origin', 'http://localhost:3000');
- Hantera både OPTIONS-förfrågningar och vanliga HTTP-metoder.
---------------------------------------------------
📝 9. Middleware Pipeline Monitor

Uppgift:
Skapa en middleware som loggar varje middleware som exekveras i kedjan.
- Logga både namnet på middleware-funktionen och tiden som varje middleware tar att köra.

Exempelutskrift:
Middleware "logRequests" startar...
Middleware "logRequests" tog 12 ms.
Middleware "requestCounter" startar...
Middleware "requestCounter" tog 3 ms.

Tips:
- Använd Function.name för att logga namnet på middleware-funktionen.
- Använd en högre ordningsfunktion för att wrappa middleware.
---------------------------------------------------
---------------------------------------------------
---------------------------------------------------
🎯 Extra Utmaning för Snabba Studenter

Kombinera flera av ovanstående övningar till en fullständig applikation som:
1: Hanterar både IP-loggning och autentisering.

2: Har rate limiting och CORS-stöd.

3: Loggar varje middleware som exekveras, inklusive tidsåtgång.